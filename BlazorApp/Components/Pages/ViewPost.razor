@page "/Posts/{postId:int}"
@using System.Security.Claims
@using ApiContracts
@using BlazorApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IPostService PostService
@inject ICommentService CommentService
@inject NavigationManager Navigation

<PageTitle>View Post</PageTitle>

<h1>TITLE: <em>@post?.Title</em></h1>
<h3>AUTHOR:<em> @post?.Author</em></h3>
<p>@post?.Body</p>

<h4>Comments</h4>
<div>
    <label>Write a comment:</label>
    <textarea @bind="body" rows="5" class="form-control" placeholder="Enter comment..."></textarea>
    <button @onclick="SubmitComment">Submit</button>
</div>
<ul>
    @foreach (var comment in comments)
    {
        <li>
            <strong>@comment.AuthorUsername:</strong> @comment.Body
        </li>
    }
</ul>

@code {
    [Parameter] public int postId { get; set; }
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private int userId; // TODO: authentification: placeholder "1"
    private string body;
    private PostDto? post;
    private ICollection<CommentDto> comments = new List<CommentDto>();
    

    // This will fire every time the parameter changes (like when postId changes)
    protected override async Task OnParametersSetAsync()
    {
        await LoadPostData();
    }

    private async Task SubmitComment()
    {
        Console.WriteLine("NameIdentifier userId " + userId);
        if(userId ==0) return;
        
        CreateCommentDto newComment = new CreateCommentDto();
        newComment.Body = body;
        newComment.PostId = postId;
        newComment.UserId = userId-1;
        await CommentService.AddCommentAsync(newComment);
        
        body = string.Empty;
        
        await LoadPostData();
   }

    private async Task LoadPostData()
    {
        post = await PostService.GetPostAsync(postId);
        comments = (await CommentService.GetComments(postId)) ?? new List<CommentDto>();
    }
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            //  User not logged in
            return;
        }

        //  Get the second on list of claims, for some reason this fixes things
        Claim? claim = claimsPrincipal.Claims.ElementAtOrDefault(1);
        if (claim != null && claim.Type == ClaimTypes.NameIdentifier)
        {
            // Retrieve the value of the NameIdentifier claim
            // Get the value of the claim (assuming it is of type 'NameIdentifier')
            string nameIdentifierValue = claim?.Value;

            // Try to convert the string to an int
            if (int.TryParse(nameIdentifierValue, out int parsedUserId))
            {
                userId = parsedUserId; // Successfully parsed the value, store it in userId
                Console.WriteLine($"Succesfully parsed: {userId}");
            }
            else
            {
                userId = -1; // Handle parsing failure (e.g., set a default or handle error)
                Console.WriteLine("Failed to parse user ID.");
            }
        }
        else
        {
            Console.WriteLine("NameIdentifier claim not found.");
        }
    }
}